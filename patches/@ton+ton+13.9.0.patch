diff --git a/node_modules/@ton/ton/dist/client/TonClient.js b/node_modules/@ton/ton/dist/client/TonClient.js
index 6a515f5..408c86b 100644
--- a/node_modules/@ton/ton/dist/client/TonClient.js
+++ b/node_modules/@ton/ton/dist/client/TonClient.js
@@ -6,33 +6,20 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _TonClient_api;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TonClient = void 0;
 const HttpApi_1 = require("./api/HttpApi");
-const core_1 = require("@ton/core");
+const ton_core_1 = require("ton-core");
 class TonClient {
     constructor(parameters) {
-        _TonClient_api.set(this, void 0);
         this.parameters = {
             endpoint: parameters.endpoint
         };
-        __classPrivateFieldSet(this, _TonClient_api, new HttpApi_1.HttpApi(this.parameters.endpoint, {
-            timeout: parameters.timeout,
-            apiKey: parameters.apiKey,
-            adapter: parameters.httpAdapter
-        }), "f");
+        this.api = new HttpApi_1.HttpApi(this.parameters.endpoint, {
+          timeout: parameters.timeout,
+          apiKey: parameters.apiKey,
+          adapter: parameters.httpAdapter
+        });
     }
     /**
      * Get Address Balance
@@ -50,7 +37,7 @@ class TonClient {
      * @returns stack and gas_used field
      */
     async runMethod(address, name, stack = []) {
-        let res = await __classPrivateFieldGet(this, _TonClient_api, "f").callGetMethod(address, name, stack);
+        let res = await this.api.callGetMethod(address, name, stack);
         if (res.exit_code !== 0) {
             throw Error('Unable to execute get method. Got exit_code: ' + res.exit_code);
         }
@@ -75,7 +62,7 @@ class TonClient {
      * @returns stack and gas_used field
     */
     async runMethodWithError(address, name, params = []) {
-        let res = await __classPrivateFieldGet(this, _TonClient_api, "f").callGetMethod(address, name, params);
+        let res = await this.api.callGetMethod(address, name, params);
         return { gas_used: res.gas_used, stack: parseStack(res.stack), exit_code: res.exit_code };
     }
     /**
@@ -95,10 +82,10 @@ class TonClient {
      */
     async getTransactions(address, opts) {
         // Fetch transactions
-        let tx = await __classPrivateFieldGet(this, _TonClient_api, "f").getTransactions(address, opts);
+        let tx = await this.api.getTransactions(address, opts);
         let res = [];
         for (let r of tx) {
-            res.push((0, core_1.loadTransaction)(core_1.Cell.fromBoc(Buffer.from(r.data, 'base64'))[0].beginParse()));
+            res.push((0, ton_core_1.loadTransaction)(ton_core_1.Cell.fromBoc(Buffer.from(r.data, 'base64'))[0].beginParse()));
         }
         return res;
     }
@@ -110,9 +97,9 @@ class TonClient {
      * @returns transaction or null if not exist
      */
     async getTransaction(address, lt, hash) {
-        let res = await __classPrivateFieldGet(this, _TonClient_api, "f").getTransaction(address, lt, hash);
+        let res = await this.api.getTransaction(address, lt, hash);
         if (res) {
-            return (0, core_1.loadTransaction)(core_1.Cell.fromBoc(Buffer.from(res.data, 'base64'))[0].beginParse());
+            return (0, ton_core_1.loadTransaction)(ton_core_1.Cell.fromBoc(Buffer.from(res.data, 'base64'))[0].beginParse());
         }
         else {
             return null;
@@ -123,7 +110,7 @@ class TonClient {
      * @returns masterchain info
      */
     async getMasterchainInfo() {
-        let r = await __classPrivateFieldGet(this, _TonClient_api, "f").getMasterchainInfo();
+        let r = await this.api.getMasterchainInfo();
         return {
             workchain: r.init.workchain,
             shard: r.last.shard,
@@ -136,7 +123,7 @@ class TonClient {
      * @param seqno masterchain seqno
      */
     async getWorkchainShards(seqno) {
-        let r = await __classPrivateFieldGet(this, _TonClient_api, "f").getShards(seqno);
+        let r = await this.api.getShards(seqno);
         return r.map((m) => ({
             workchain: m.workchain,
             shard: m.shard,
@@ -150,12 +137,12 @@ class TonClient {
      * @param shard
      */
     async getShardTransactions(workchain, seqno, shard) {
-        let tx = await __classPrivateFieldGet(this, _TonClient_api, "f").getBlockTransactions(workchain, seqno, shard);
+        let tx = await this.api.getBlockTransactions(workchain, seqno, shard);
         if (tx.incomplete) {
             throw Error('Unsupported');
         }
         return tx.transactions.map((v) => ({
-            account: core_1.Address.parseRaw(v.account),
+            account: ton_core_1.Address.parseRaw(v.account),
             lt: v.lt,
             hash: v.hash
         }));
@@ -165,18 +152,18 @@ class TonClient {
      * @param src source message
      */
     async sendMessage(src) {
-        const boc = (0, core_1.beginCell)()
-            .store((0, core_1.storeMessage)(src))
+        const boc = (0, ton_core_1.beginCell)()
+            .store((0, ton_core_1.storeMessage)(src))
             .endCell()
             .toBoc();
-        await __classPrivateFieldGet(this, _TonClient_api, "f").sendBoc(boc);
+        await this.api.sendBoc(boc);
     }
     /**
      * Send file to a network
      * @param src source file
      */
     async sendFile(src) {
-        await __classPrivateFieldGet(this, _TonClient_api, "f").sendBoc(src);
+        await this.api.sendBoc(src);
     }
     /**
      * Estimate fees for external message
@@ -184,7 +171,7 @@ class TonClient {
      * @returns
      */
     async estimateExternalMessageFee(address, args) {
-        return await __classPrivateFieldGet(this, _TonClient_api, "f").estimateFee(address, { body: args.body, initCode: args.initCode, initData: args.initData, ignoreSignature: args.ignoreSignature });
+        return await this.api.estimateFee(address, { body: args.body, initCode: args.initCode, initData: args.initData, ignoreSignature: args.ignoreSignature });
     }
     /**
      * Send external message to contract
@@ -193,14 +180,14 @@ class TonClient {
      */
     async sendExternalMessage(contract, src) {
         if (await this.isContractDeployed(contract.address) || !contract.init) {
-            const message = (0, core_1.external)({
+            const message = (0, ton_core_1.external)({
                 to: contract.address,
                 body: src
             });
             await this.sendMessage(message);
         }
         else {
-            const message = (0, core_1.external)({
+            const message = (0, ton_core_1.external)({
                 to: contract.address,
                 init: { code: contract.init.code, data: contract.init.data },
                 body: src
@@ -221,7 +208,7 @@ class TonClient {
      * @param address contract address
      */
     async getContractState(address) {
-        let info = await __classPrivateFieldGet(this, _TonClient_api, "f").getAddressInformation(address);
+        let info = await this.api.getAddressInformation(address);
         let balance = BigInt(info.balance);
         let state = info.state;
         return {
@@ -247,7 +234,7 @@ class TonClient {
      * @returns contract
      */
     open(src) {
-        return (0, core_1.openContract)(src, (args) => createProvider(this, args.address, args.init));
+        return (0, ton_core_1.openContract)(src, (args) => createProvider(this, args.address, args.init));
     }
     /**
      * Create a provider
@@ -261,60 +248,35 @@ class TonClient {
 }
 exports.TonClient = TonClient;
 _TonClient_api = new WeakMap();
-function parseStackEntry(s) {
-    switch (s["@type"]) {
-        case "tvm.stackEntryNumber":
-            return { type: 'int', value: BigInt(s.number.number) };
-        case "tvm.stackEntryCell":
-            return { type: 'cell', cell: core_1.Cell.fromBase64(s.cell) };
-        case 'tvm.stackEntryTuple':
-            return { type: 'tuple', items: s.tuple.elements.map(parseStackEntry) };
-        default:
-            throw Error("Unsupported item type: " + s["@type"]);
-    }
-}
-function parseStackItem(s) {
-    if (s[0] === 'num') {
-        let val = s[1];
-        if (val.startsWith('-')) {
-            return { type: 'int', value: -BigInt(val.slice(1)) };
-        }
-        else {
-            return { type: 'int', value: BigInt(val) };
-        }
-    }
-    else if (s[0] === 'null') {
-        return { type: 'null' };
-    }
-    else if (s[0] === 'cell') {
-        return { type: 'cell', cell: core_1.Cell.fromBoc(Buffer.from(s[1].bytes, 'base64'))[0] };
-    }
-    else if (s[0] === 'slice') {
-        return { type: 'slice', cell: core_1.Cell.fromBoc(Buffer.from(s[1].bytes, 'base64'))[0] };
-    }
-    else if (s[0] === 'builder') {
-        return { type: 'builder', cell: core_1.Cell.fromBoc(Buffer.from(s[1].bytes, 'base64'))[0] };
-    }
-    else if (s[0] === 'tuple' || s[0] === 'list') {
-        // toncenter.com missbehaviour
-        if (s[1].elements.length === 0) {
-            return { type: 'null' };
-        }
-        return {
-            type: s[0],
-            items: s[1].elements.map(parseStackEntry)
-        };
-    }
-    else {
-        throw Error('Unsupported stack item type: ' + s[0]);
-    }
-}
 function parseStack(src) {
     let stack = [];
     for (let s of src) {
-        stack.push(parseStackItem(s));
+        if (s[0] === 'num') {
+            let val = s[1];
+            if (val.startsWith('-')) {
+                stack.push({ type: 'int', value: -BigInt(val.slice(1)) });
+            }
+            else {
+                stack.push({ type: 'int', value: BigInt(val) });
+            }
+        }
+        else if (s[0] === 'null') {
+            stack.push({ type: 'null' });
+        }
+        else if (s[0] === 'cell') {
+            stack.push({ type: 'cell', cell: ton_core_1.Cell.fromBoc(Buffer.from(s[1].bytes, 'base64'))[0] });
+        }
+        else if (s[0] === 'slice') {
+            stack.push({ type: 'slice', cell: ton_core_1.Cell.fromBoc(Buffer.from(s[1].bytes, 'base64'))[0] });
+        }
+        else if (s[0] === 'builder') {
+            stack.push({ type: 'builder', cell: ton_core_1.Cell.fromBoc(Buffer.from(s[1].bytes, 'base64'))[0] });
+        }
+        else {
+            throw Error('Unsupported stack item type: ' + s[0]);
+        }
     }
-    return new core_1.TupleReader(stack);
+    return new ton_core_1.TupleReader(stack);
 }
 function createProvider(client, address, init) {
     return {
@@ -365,13 +327,13 @@ function createProvider(client, address, init) {
             //
             // Send package
             //
-            const ext = (0, core_1.external)({
+            const ext = (0, ton_core_1.external)({
                 to: address,
                 init: neededInit ? { code: neededInit.code, data: neededInit.data } : null,
                 body: message
             });
-            let boc = (0, core_1.beginCell)()
-                .store((0, core_1.storeMessage)(ext))
+            let boc = (0, ton_core_1.beginCell)()
+                .store((0, ton_core_1.storeMessage)(ext))
                 .endCell()
                 .toBoc();
             await client.sendFile(boc);
@@ -390,7 +352,7 @@ function createProvider(client, address, init) {
             // Resolve value
             let value;
             if (typeof message.value === 'string') {
-                value = (0, core_1.toNano)(message.value);
+                value = (0, ton_core_1.toNano)(message.value);
             }
             else {
                 value = message.value;
@@ -398,7 +360,7 @@ function createProvider(client, address, init) {
             // Resolve body
             let body = null;
             if (typeof message.body === 'string') {
-                body = (0, core_1.comment)(message.body);
+                body = (0, ton_core_1.comment)(message.body);
             }
             else if (message.body) {
                 body = message.body;
