diff --git a/node_modules/@ton/ton/dist/client/TonClient.d.ts b/node_modules/@ton/ton/dist/client/TonClient.d.ts
index e5af2a8..cf95585 100644
--- a/node_modules/@ton/ton/dist/client/TonClient.d.ts
+++ b/node_modules/@ton/ton/dist/client/TonClient.d.ts
@@ -27,8 +27,8 @@ export declare type TonClientParameters = {
     httpAdapter?: AxiosAdapter;
 };
 export declare class TonClient {
-    #private;
     readonly parameters: TonClientParameters;
+    private readonly api;
     constructor(parameters: TonClientParameters);
     /**
      * Get Address Balance
diff --git a/node_modules/@ton/ton/dist/client/TonClient.js b/node_modules/@ton/ton/dist/client/TonClient.js
index 6a515f5..7d2a2d1 100644
--- a/node_modules/@ton/ton/dist/client/TonClient.js
+++ b/node_modules/@ton/ton/dist/client/TonClient.js
@@ -6,33 +6,20 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _TonClient_api;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TonClient = void 0;
 const HttpApi_1 = require("./api/HttpApi");
 const core_1 = require("@ton/core");
 class TonClient {
     constructor(parameters) {
-        _TonClient_api.set(this, void 0);
         this.parameters = {
             endpoint: parameters.endpoint
         };
-        __classPrivateFieldSet(this, _TonClient_api, new HttpApi_1.HttpApi(this.parameters.endpoint, {
+        this.api = new HttpApi_1.HttpApi(this.parameters.endpoint, {
             timeout: parameters.timeout,
             apiKey: parameters.apiKey,
             adapter: parameters.httpAdapter
-        }), "f");
+        });
     }
     /**
      * Get Address Balance
@@ -50,7 +37,7 @@ class TonClient {
      * @returns stack and gas_used field
      */
     async runMethod(address, name, stack = []) {
-        let res = await __classPrivateFieldGet(this, _TonClient_api, "f").callGetMethod(address, name, stack);
+        let res = await this.api.callGetMethod(address, name, stack);
         if (res.exit_code !== 0) {
             throw Error('Unable to execute get method. Got exit_code: ' + res.exit_code);
         }
@@ -75,7 +62,7 @@ class TonClient {
      * @returns stack and gas_used field
     */
     async runMethodWithError(address, name, params = []) {
-        let res = await __classPrivateFieldGet(this, _TonClient_api, "f").callGetMethod(address, name, params);
+        let res = await this.api.callGetMethod(address, name, params);
         return { gas_used: res.gas_used, stack: parseStack(res.stack), exit_code: res.exit_code };
     }
     /**
@@ -95,7 +82,7 @@ class TonClient {
      */
     async getTransactions(address, opts) {
         // Fetch transactions
-        let tx = await __classPrivateFieldGet(this, _TonClient_api, "f").getTransactions(address, opts);
+        let tx = await this.api.getTransactions(address, opts);
         let res = [];
         for (let r of tx) {
             res.push((0, core_1.loadTransaction)(core_1.Cell.fromBoc(Buffer.from(r.data, 'base64'))[0].beginParse()));
@@ -110,7 +97,7 @@ class TonClient {
      * @returns transaction or null if not exist
      */
     async getTransaction(address, lt, hash) {
-        let res = await __classPrivateFieldGet(this, _TonClient_api, "f").getTransaction(address, lt, hash);
+        let res = await this.api.getTransaction(address, lt, hash);
         if (res) {
             return (0, core_1.loadTransaction)(core_1.Cell.fromBoc(Buffer.from(res.data, 'base64'))[0].beginParse());
         }
@@ -123,7 +110,7 @@ class TonClient {
      * @returns masterchain info
      */
     async getMasterchainInfo() {
-        let r = await __classPrivateFieldGet(this, _TonClient_api, "f").getMasterchainInfo();
+        let r = await this.api.getMasterchainInfo();
         return {
             workchain: r.init.workchain,
             shard: r.last.shard,
@@ -136,7 +123,7 @@ class TonClient {
      * @param seqno masterchain seqno
      */
     async getWorkchainShards(seqno) {
-        let r = await __classPrivateFieldGet(this, _TonClient_api, "f").getShards(seqno);
+        let r = await this.api.getShards(seqno);
         return r.map((m) => ({
             workchain: m.workchain,
             shard: m.shard,
@@ -150,7 +137,7 @@ class TonClient {
      * @param shard
      */
     async getShardTransactions(workchain, seqno, shard) {
-        let tx = await __classPrivateFieldGet(this, _TonClient_api, "f").getBlockTransactions(workchain, seqno, shard);
+        let tx = await this.api.getBlockTransactions(workchain, seqno, shard);
         if (tx.incomplete) {
             throw Error('Unsupported');
         }
@@ -169,14 +156,14 @@ class TonClient {
             .store((0, core_1.storeMessage)(src))
             .endCell()
             .toBoc();
-        await __classPrivateFieldGet(this, _TonClient_api, "f").sendBoc(boc);
+        await this.api.sendBoc(boc);
     }
     /**
      * Send file to a network
      * @param src source file
      */
     async sendFile(src) {
-        await __classPrivateFieldGet(this, _TonClient_api, "f").sendBoc(src);
+        await this.api.sendBoc(src);
     }
     /**
      * Estimate fees for external message
@@ -184,7 +171,7 @@ class TonClient {
      * @returns
      */
     async estimateExternalMessageFee(address, args) {
-        return await __classPrivateFieldGet(this, _TonClient_api, "f").estimateFee(address, { body: args.body, initCode: args.initCode, initData: args.initData, ignoreSignature: args.ignoreSignature });
+        return await this.api.estimateFee(address, { body: args.body, initCode: args.initCode, initData: args.initData, ignoreSignature: args.ignoreSignature });
     }
     /**
      * Send external message to contract
@@ -221,7 +208,7 @@ class TonClient {
      * @param address contract address
      */
     async getContractState(address) {
-        let info = await __classPrivateFieldGet(this, _TonClient_api, "f").getAddressInformation(address);
+        let info = await this.api.getAddressInformation(address);
         let balance = BigInt(info.balance);
         let state = info.state;
         return {
@@ -260,7 +247,6 @@ class TonClient {
     }
 }
 exports.TonClient = TonClient;
-_TonClient_api = new WeakMap();
 function parseStackEntry(s) {
     switch (s["@type"]) {
         case "tvm.stackEntryNumber":
